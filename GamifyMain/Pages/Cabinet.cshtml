@page
@model GamifyMain.Pages.CabinetModel
@using GamifyMain.Controllers
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    Layout = "~/Pages/_Layout.cshtml";

    if (ModelState.IsValid)
    {
        <form name="placeForm">
            <input type="hidden" name="id" value="0" />
            <div class="form-group col-md-5">
                <label for="lat">Latitude:</label>
                <input name="lat" value="0" />
            </div>
            <div class="form-group col-md-5">
                <label for="lng">Longitude:</label>
                <input name="lng" value="0" />
            </div>
            <div class="form-group col-md-5">
                <label for="name">Name:</label>
                <input class="form-control" name="name" />
            </div>
            <div class="panel-body">
                <button type="submit" id="submit" class="btn btn-primary">Save</button>
                <a id="reset" class="btn btn-primary">Reset</a>
            </div>
        </form>
        <div>Select the location of a new place:</div>
        <div class="container">
            <div id="map" style="width: 500px; height: 400px;"></div>
        </div>
        <div name="placesTableWrapper" class="justify-content-center">
            <table name="placesTable" class="table table-condensed table-striped col-md-6">
                <thead><tr><th>Your places:</th></tr></thead>
                <tbody></tbody>
            </table>
        </div>
        <script>
            var map;
            function initMap() {
                map = new google.maps.Map(document.getElementById("map"), {
                    zoom: 14,
                    center: { lat: 38, lng: 42 }
                });
                var infoWindow = new google.maps.InfoWindow({
                    content: "Click the map to get Lat/Lng",
                    position: map.getCenter()
                });

                infoWindow.open(map);
                map.addListener("click", (mapsMouseEvent) => {
                    infoWindow.close();

                    const form = document.forms["placeForm"];
                    form.elements["lat"].value = mapsMouseEvent.latLng.toJSON()["lat"];
                    form.elements["lng"].value = mapsMouseEvent.latLng.toJSON()["lng"];

                    infoWindow = new google.maps.InfoWindow({
                        position: mapsMouseEvent.latLng,
                    });
                    infoWindow.setContent(
                        JSON.stringify(mapsMouseEvent.latLng.toJSON(), null, 2)
                    );
                    infoWindow.open(map);
                });
            }

            async function GetPlaces() {
                const response = await fetch("/api/places", {
                    method: "GET",
                    headers: { "Accept": "application/json" }
                });

                if (response.ok === true) {
                    const places = await response.json();
                    let rows = document.querySelector("tbody");
                    places.forEach(place => {
                        console.log(place.ownerId);
                        console.log(currentProfile.getEmail());
                        if (place.ownerId === currentProfile.getEmail()) {
                            rows.append(row(place));
                            markPlace(place);
                        }
                    });
                }
            }

            async function CreatePlace(placeName, placeLat, placeLon) {
                console.log(currentProfile);
                var ownerId = currentProfile.getEmail();
                console.log("Creating a place: " + placeName + " " + placeLat + " " + placeLon + " " + ownerId);
                const response = await fetch("https://localhost:44395/api/places", {
                    method: "POST",
                    headers: { "Accept": "application/json", "Content-Type": "application/json" },
                    body: JSON.stringify({
                        name: placeName,
                        coordLat: +placeLat,
                        coordLon: +placeLon,
                        ownerId: ownerId
                    })
                });
                if (response.ok === true) {
                    const place = await response.json();
                    reset();
                    document.querySelector("tbody").append(row(place));
                }
            }

            async function DeletePlace(id) {
                const response = await fetch("/api/places/" + id, {
                    method: "DELETE",
                    headers: { "Accept": "application/json" }
                });
                if (response.ok === true) {
                    const place = await response.json();
                    document.querySelector("tr[data-rowid='" + place.id + "']").remove();
                }
            }

            function markPlace(place) {
                const marker = new google.maps.Marker({
                    position: {lat: place.lat, lng: place.lng},
                    map: map,
                });
            }

            function row(place) {

                const tr = document.createElement("tr");
                tr.setAttribute("data-rowid", place.id);

                const nameTd = document.createElement("td");
                nameTd.append(place.name);
                tr.append(nameTd);

                const linksTd = document.createElement("td");

                //const editLink = document.createElement("a");
                //editLink.setAttribute("data-id", user.id);
                //editLink.setAttribute("style", "cursor:pointer;padding:15px;");
                //editLink.append("Изменить");
                //editLink.addEventListener("click", e => {

                //    e.preventDefault();
                //    GetUser(user.id);
                //});
                //linksTd.append(editLink);

                const removeLink = document.createElement("a");
                removeLink.setAttribute("data-id", place.id);
                removeLink.setAttribute("style", "cursor:pointer;padding:15px;");
                removeLink.append("Remove");
                removeLink.addEventListener("click", e => {
                    e.preventDefault();
                    DeletePlace(place.id);
                });

                linksTd.append(removeLink);
                tr.appendChild(linksTd);

                return tr;
            }

            function reset() {
                const form = document.forms["placeForm"];
                form.reset();
                form.elements["id"].value = 0;
            }

            document.forms["placeForm"].addEventListener("submit", e => {
                e.preventDefault();
                const form = document.forms["placeForm"];
                const id = form.elements["id"].value;
                const name = form.elements["name"].value;
                const lat = form.elements["lat"].value;
                const lng = form.elements["lng"].value;
                if (id == 0)
                    CreatePlace(name, lat, lng);
                reset();
            });

            GetPlaces();
        </script>
        <script async defer src="https://maps.googleapis.com/maps/api/js?key=@Configuration.GetSection("GoogleMaps")["Key"]&callback=initMap"></script>
    }
}
